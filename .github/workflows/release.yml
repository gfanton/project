name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Verify release tag
        run: |
          # Extract version from tag
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION_NO_V="${VERSION#v}"
          
          echo "Tag version: ${VERSION}"
          echo "Expected version: ${VERSION_NO_V}"
          
          # Verify flake.nix has correct version
          echo "Verifying flake.nix has correct version..."
          FLAKE_VERSION=$(grep 'version = "' flake.nix | sed 's/.*version = "\([^"]*\)".*/\1/')
          echo "Flake version: ${FLAKE_VERSION}"
          
          if [ "${FLAKE_VERSION}" != "${VERSION_NO_V}" ]; then
            echo "Error: Version mismatch in flake.nix"
            echo "Expected: ${VERSION_NO_V}, Found: ${FLAKE_VERSION}"
            echo "Please ensure the release was created with ./scripts/release.sh"
            exit 1
          fi
          
          # Verify vendorHash is not fake
          if grep -q "fakeHash" flake.nix; then
            echo "Error: flake.nix contains fakeHash"
            echo "Please ensure the release was created with ./scripts/release.sh"
            exit 1
          fi
          
          # Show current state
          echo "Current flake.nix configuration:"
          grep -E "version = \"|vendorHash = \"" flake.nix

      - name: Verify nix build
        run: |
          echo "Testing nix build..."
          nix build --no-link
          echo "Build successful!"

      - name: Run tests
        run: nix develop --command make test

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}