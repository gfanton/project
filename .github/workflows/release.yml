name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Verify release tag
        run: |
          # Extract version from tag
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION_NO_V="${VERSION#v}"
          
          echo "Processing release for version: ${VERSION} (${VERSION_NO_V})"
          
          # Verify flake.nix has correct version - be more specific to avoid multiple matches
          echo "Verifying flake.nix has correct version..."
          
          # Look specifically for the main project version (first occurrence)
          FLAKE_VERSION=$(awk '/packages\.project.*buildGo.*Module.*rec.*{/,/version = "/{if(/version = "/){gsub(/.*version = "|";.*/, ""); print; exit}}' flake.nix)
          
          # Fallback to simpler method if awk fails
          if [ -z "$FLAKE_VERSION" ]; then
            FLAKE_VERSION=$(grep -m1 'version = "' flake.nix | sed 's/.*version = "\([^"]*\)".*/\1/')
          fi
          
          echo "Expected version: ${VERSION_NO_V}"
          echo "Found version: ${FLAKE_VERSION}"
          
          # Trim whitespace and compare
          VERSION_NO_V_TRIMMED=$(echo "${VERSION_NO_V}" | tr -d '[:space:]')
          FLAKE_VERSION_TRIMMED=$(echo "${FLAKE_VERSION}" | tr -d '[:space:]')
          
          if [ "${FLAKE_VERSION_TRIMMED}" != "${VERSION_NO_V_TRIMMED}" ]; then
            echo "❌ Version mismatch in flake.nix"
            echo "Expected: '${VERSION_NO_V_TRIMMED}' (length: ${#VERSION_NO_V_TRIMMED})"
            echo "Found: '${FLAKE_VERSION_TRIMMED}' (length: ${#FLAKE_VERSION_TRIMMED})"
            exit 1
          fi
          
          echo "✅ Version verification passed"
          
          echo "✅ All verifications passed"

      - name: Verify nix build
        run: |
          echo "Testing nix build..."
          nix build --no-link
          echo "Build successful!"

      - name: Run tests
        run: nix develop --command make test

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}