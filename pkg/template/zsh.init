# Zsh integration for project command
# Based on zoxide patterns and zsh completion best practices

# Helper functions
function __project_pwd() {
    \builtin pwd -L
}

function __project_cd() {
    \builtin cd -- "$@" && echo "switched to '$@'"
}

# Main project function
function __project_p() {
    # shellcheck disable=SC2199
    if [[ "$#" -eq 0 ]]; then
        __project_cd ~
    elif [[ "$#" -eq 1 ]] && [[ "$1" = '-' ]]; then
        if [[ -n "${OLDPWD}" ]]; then
            __project_cd "${OLDPWD}"
        else
            # shellcheck disable=SC2016
            \builtin printf 'project: $OLDPWD is not set\n'
            return 1
        fi
    elif [[ "$#" -eq 1 ]] && [[ -d "$1" ]]; then
        __project_cd "$1"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command {{.Exec}} query --abspath --limit 1 -- "$@")" &&
            __project_cd "${result}"
    fi
}

# User-facing function
function p() { __project_p "$@"; }

# Completion function
function _p() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    # Build the query from the command line
    local query
    if (( CURRENT > 1 )); then
        query="${words[2,CURRENT]}"
    else
        query=""
    fi

    # Get project completions
    local -a projects
    projects=($(\command {{.Exec}} query --limit 20 -- $query 2>/dev/null))

    if [[ ${#projects[@]} -gt 0 ]]; then
        compadd -a projects
        return 0
    fi

    return 1
}

# Initialize completion system if not already done
if [[ -n "${ZSH_VERSION-}" ]]; then
    if [[ ${+functions[compdef]} -eq 0 ]]; then
        autoload -U compinit
        compinit
    fi

    # Register completion for the function
    compdef _p p
fi

# To initialize project completion, add this to your ~/.zshrc:
#
# eval "$(proj init zsh)"