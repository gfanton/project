# Zsh integration for project command
# Based on zoxide patterns and zsh completion best practices

# Helper functions
function __project_pwd() {
    \builtin pwd -L
}

function __project_cd() {
    \builtin cd -- "$@" && echo "switched to '$@'"
}

# Main project function
function __project_p() {
    # shellcheck disable=SC2199
    if [[ "$#" -eq 0 ]]; then
        __project_cd ~
    elif [[ "$#" -eq 1 ]] && [[ "$1" = '-' ]]; then
        if [[ -n "${OLDPWD}" ]]; then
            __project_cd "${OLDPWD}"
        else
            # shellcheck disable=SC2016
            \builtin printf 'project: $OLDPWD is not set\n'
            return 1
        fi
    elif [[ "$#" -eq 1 ]] && [[ -d "$1" ]]; then
        __project_cd "$1"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command {{.Exec}} query --abspath --exclude "$(__project_pwd)" --limit 1 -- "$@")" &&
            __project_cd "${result}"
    fi
}

# Completion function - following zsh best practices
function _p() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    # Get what the user has typed so far
    local query="${words[2,-1]}"
    
    # Get project completions
    local -a projects
    projects=($(\command {{.Exec}} query --limit 20 --exclude "$(__project_pwd)" -- ${query} 2>/dev/null))
    
    # Add completions if we have projects
    if [[ ${#projects[@]} -gt 0 ]]; then
        compadd -a projects
        return 0
    fi
    
    return 1
}

# Register completion function
if [[ -n "${ZSH_VERSION-}" ]]; then
    # Initialize completion system if not already done
    if [[ ${+functions[compdef]} -eq 0 ]]; then
        autoload -U compinit
        compinit
    fi
    
    # Register completion
    compdef _p p
fi

# Create the p alias
\builtin unalias p &>/dev/null || \builtin true
\builtin alias p=__project_p

# To initialize project completion, add this to your ~/.zshrc:
#
# eval "$(proj init zsh)"